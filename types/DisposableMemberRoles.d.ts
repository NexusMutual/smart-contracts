/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface DisposableMemberRolesContract
  extends Truffle.Contract<DisposableMemberRolesInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<DisposableMemberRolesInstance>;
}

export interface MemberRole {
  name: "MemberRole";
  args: {
    roleId: BN;
    roleName: string;
    roleDescription: string;
    0: BN;
    1: string;
    2: string;
  };
}

export interface switchedMembership {
  name: "switchedMembership";
  args: {
    previousMember: string;
    newMember: string;
    timeStamp: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents = MemberRole | switchedMembership;

export interface DisposableMemberRolesInstance
  extends Truffle.ContractInstance {
  addInitialABMembers: {
    (abArray: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      abArray: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      abArray: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      abArray: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addMembersBeforeLaunch: {
    (
      userArray: string[],
      tokens: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      userArray: string[],
      tokens: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      userArray: string[],
      tokens: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      userArray: string[],
      tokens: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addRole: {
    (
      _roleName: string,
      _roleDescription: string,
      _authorized: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _roleName: string,
      _roleDescription: string,
      _authorized: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _roleName: string,
      _roleDescription: string,
      _authorized: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _roleName: string,
      _roleDescription: string,
      _authorized: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  authorized(
    _memberRoleId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  changeAuthorized: {
    (
      _roleId: number | BN | string,
      _newAuthorized: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _roleId: number | BN | string,
      _newAuthorized: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _roleId: number | BN | string,
      _newAuthorized: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _roleId: number | BN | string,
      _newAuthorized: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeMasterAddress: {
    (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeMaxABCount: {
    (
      _val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkRole(
    _memberAddress: string,
    _roleId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  dAppToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getClaimPayoutAddress(
    _member: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getMemberLengthForAllRoles(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  initialize: {
    (
      _owner: string,
      _masterAddress: string,
      _tokenControllerAddress: string,
      _initialMembers: string[],
      _initialMemberTokens: (number | BN | string)[],
      _initialABMembers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _owner: string,
      _masterAddress: string,
      _tokenControllerAddress: string,
      _initialMembers: string[],
      _initialMemberTokens: (number | BN | string)[],
      _initialABMembers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _owner: string,
      _masterAddress: string,
      _tokenControllerAddress: string,
      _initialMembers: string[],
      _initialMemberTokens: (number | BN | string)[],
      _initialABMembers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _owner: string,
      _masterAddress: string,
      _tokenControllerAddress: string,
      _initialMembers: string[],
      _initialMemberTokens: (number | BN | string)[],
      _initialABMembers: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAuthorizedToGovern(
    _toCheck: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  kycVerdict: {
    (
      _userAddress: string,
      verdict: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _userAddress: string,
      verdict: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _userAddress: string,
      verdict: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _userAddress: string,
      verdict: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  launched(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  launchedOn(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  masterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  maxABCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  memberAtIndex(
    _memberRoleId: number | BN | string,
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean]>;

  memberRolesInitiate: {
    (
      _firstAB: string,
      memberAuthority: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _firstAB: string,
      memberAuthority: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _firstAB: string,
      memberAuthority: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _firstAB: string,
      memberAuthority: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  members(
    _memberRoleId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, string[]]>;

  membersLength(
    _memberRoleId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

  numberOfMembers(
    _memberRoleId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  payJoiningFee: {
    (_userAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _userAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _userAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _userAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  roles(
    _memberAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  setClaimPayoutAddress: {
    (_address: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapABMember: {
    (
      _newABAddress: string,
      _removeAB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _newABAddress: string,
      _removeAB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newABAddress: string,
      _removeAB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newABAddress: string,
      _removeAB: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  swapOwner: {
    (_newOwnerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newOwnerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newOwnerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newOwnerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  switchMembership: {
    (_add: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_add: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tk(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalRoles(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  updateRole: {
    (
      _memberAddress: string,
      _roleId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _memberAddress: string,
      _roleId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _memberAddress: string,
      _roleId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _memberAddress: string,
      _roleId: number | BN | string,
      _active: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawMembership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    addInitialABMembers: {
      (abArray: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        abArray: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        abArray: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        abArray: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addMembersBeforeLaunch: {
      (
        userArray: string[],
        tokens: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        userArray: string[],
        tokens: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        userArray: string[],
        tokens: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        userArray: string[],
        tokens: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addRole: {
      (
        _roleName: string,
        _roleDescription: string,
        _authorized: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _roleName: string,
        _roleDescription: string,
        _authorized: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _roleName: string,
        _roleDescription: string,
        _authorized: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _roleName: string,
        _roleDescription: string,
        _authorized: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    authorized(
      _memberRoleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    changeAuthorized: {
      (
        _roleId: number | BN | string,
        _newAuthorized: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _roleId: number | BN | string,
        _newAuthorized: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _roleId: number | BN | string,
        _newAuthorized: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _roleId: number | BN | string,
        _newAuthorized: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeMasterAddress: {
      (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeMaxABCount: {
      (
        _val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    checkRole(
      _memberAddress: string,
      _roleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    dAppToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getClaimPayoutAddress(
      _member: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getMemberLengthForAllRoles(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    initialize: {
      (
        _owner: string,
        _masterAddress: string,
        _tokenControllerAddress: string,
        _initialMembers: string[],
        _initialMemberTokens: (number | BN | string)[],
        _initialABMembers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _owner: string,
        _masterAddress: string,
        _tokenControllerAddress: string,
        _initialMembers: string[],
        _initialMemberTokens: (number | BN | string)[],
        _initialABMembers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _owner: string,
        _masterAddress: string,
        _tokenControllerAddress: string,
        _initialMembers: string[],
        _initialMemberTokens: (number | BN | string)[],
        _initialABMembers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _owner: string,
        _masterAddress: string,
        _tokenControllerAddress: string,
        _initialMembers: string[],
        _initialMemberTokens: (number | BN | string)[],
        _initialABMembers: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isAuthorizedToGovern(
      _toCheck: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    kycVerdict: {
      (
        _userAddress: string,
        verdict: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _userAddress: string,
        verdict: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _userAddress: string,
        verdict: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _userAddress: string,
        verdict: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    launched(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    launchedOn(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    masterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    maxABCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    memberAtIndex(
      _memberRoleId: number | BN | string,
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, boolean]>;

    memberRolesInitiate: {
      (
        _firstAB: string,
        memberAuthority: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _firstAB: string,
        memberAuthority: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _firstAB: string,
        memberAuthority: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _firstAB: string,
        memberAuthority: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    members(
      _memberRoleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string[]]>;

    membersLength(
      _memberRoleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

    numberOfMembers(
      _memberRoleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    payJoiningFee: {
      (_userAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _userAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _userAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _userAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    roles(
      _memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    setClaimPayoutAddress: {
      (_address: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapABMember: {
      (
        _newABAddress: string,
        _removeAB: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _newABAddress: string,
        _removeAB: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newABAddress: string,
        _removeAB: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newABAddress: string,
        _removeAB: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    swapOwner: {
      (
        _newOwnerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _newOwnerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newOwnerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newOwnerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    switchMembership: {
      (_add: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_add: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tk(txDetails?: Truffle.TransactionDetails): Promise<string>;

    totalRoles(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    updateRole: {
      (
        _memberAddress: string,
        _roleId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _memberAddress: string,
        _roleId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _memberAddress: string,
        _roleId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _memberAddress: string,
        _roleId: number | BN | string,
        _active: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawMembership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
