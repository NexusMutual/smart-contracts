/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface OraclizeIContract extends Truffle.Contract<OraclizeIInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OraclizeIInstance>;
}

type AllEvents = never;

export interface OraclizeIInstance extends Truffle.ContractInstance {
  cbAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  query: {
    (
      _timestamp: number | BN | string,
      _datasource: string,
      _arg: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  query2: {
    (
      _timestamp: number | BN | string,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  query2_withGasLimit: {
    (
      _timestamp: number | BN | string,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg1: string,
      _arg2: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  queryN: {
    (
      _timestamp: number | BN | string,
      _datasource: string,
      _argN: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timestamp: number | BN | string,
      _datasource: string,
      _argN: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _timestamp: number | BN | string,
      _datasource: string,
      _argN: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timestamp: number | BN | string,
      _datasource: string,
      _argN: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  queryN_withGasLimit: {
    (
      _timestamp: number | BN | string,
      _datasource: string,
      _argN: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timestamp: number | BN | string,
      _datasource: string,
      _argN: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _timestamp: number | BN | string,
      _datasource: string,
      _argN: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timestamp: number | BN | string,
      _datasource: string,
      _argN: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  query_withGasLimit: {
    (
      _timestamp: number | BN | string,
      _datasource: string,
      _arg: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timestamp: number | BN | string,
      _datasource: string,
      _arg: string,
      _gasLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  randomDS_getSessionPubKeyHash(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setCustomGasPrice: {
    (
      _gasPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _gasPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _gasPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _gasPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setProofType: {
    (_proofType: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _proofType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proofType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proofType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    cbAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    query: {
      (
        _timestamp: number | BN | string,
        _datasource: string,
        _arg: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    query2: {
      (
        _timestamp: number | BN | string,
        _datasource: string,
        _arg1: string,
        _arg2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg1: string,
        _arg2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg1: string,
        _arg2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg1: string,
        _arg2: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    query2_withGasLimit: {
      (
        _timestamp: number | BN | string,
        _datasource: string,
        _arg1: string,
        _arg2: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg1: string,
        _arg2: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg1: string,
        _arg2: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg1: string,
        _arg2: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    queryN: {
      (
        _timestamp: number | BN | string,
        _datasource: string,
        _argN: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timestamp: number | BN | string,
        _datasource: string,
        _argN: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _timestamp: number | BN | string,
        _datasource: string,
        _argN: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timestamp: number | BN | string,
        _datasource: string,
        _argN: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    queryN_withGasLimit: {
      (
        _timestamp: number | BN | string,
        _datasource: string,
        _argN: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timestamp: number | BN | string,
        _datasource: string,
        _argN: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _timestamp: number | BN | string,
        _datasource: string,
        _argN: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timestamp: number | BN | string,
        _datasource: string,
        _argN: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    query_withGasLimit: {
      (
        _timestamp: number | BN | string,
        _datasource: string,
        _arg: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timestamp: number | BN | string,
        _datasource: string,
        _arg: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    randomDS_getSessionPubKeyHash(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    setCustomGasPrice: {
      (
        _gasPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _gasPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _gasPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _gasPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setProofType: {
      (_proofType: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _proofType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proofType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proofType: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "getPrice(string,uint256)": {
      (
        _datasource: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _datasource: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _datasource: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _datasource: string,
        _gasLimit: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "getPrice(string)": {
      (_datasource: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _datasource: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _datasource: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _datasource: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
