/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IProposalCategoryContract
  extends Truffle.Contract<IProposalCategoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IProposalCategoryInstance>;
}

export interface Category {
  name: "Category";
  args: {
    categoryId: BN;
    categoryName: string;
    actionHash: string;
    0: BN;
    1: string;
    2: string;
  };
}

type AllEvents = Category;

export interface IProposalCategoryInstance extends Truffle.ContractInstance {
  addCategory: {
    (
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  category(
    _categoryId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN[], BN, BN]>;

  categoryAction(
    _categoryId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, string, string, BN]>;

  totalCategories(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  updateCategory: {
    (
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addCategory: {
      (
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    category(
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN, BN[], BN, BN]>;

    categoryAction(
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string, string, BN]>;

    totalCategories(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    updateCategory: {
      (
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
