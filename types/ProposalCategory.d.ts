/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ProposalCategoryContract
  extends Truffle.Contract<ProposalCategoryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ProposalCategoryInstance>;
}

export interface Category {
  name: "Category";
  args: {
    categoryId: BN;
    categoryName: string;
    actionHash: string;
    0: BN;
    1: string;
    2: string;
  };
}

type AllEvents = Category;

export interface ProposalCategoryInstance extends Truffle.ContractInstance {
  addCategory: {
    (
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  category(
    _categoryId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN[], BN, BN]>;

  categoryABReq(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  categoryAction(
    _categoryId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, string, string, BN]>;

  categoryActionDetails(
    _categoryId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, string, string, BN, string]>;

  categoryActionHashUpdated(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  categoryActionHashes(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  categoryExtendedData(
    _categoryId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeMasterAddress: {
    (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  constructorCheck(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  editCategory: {
    (
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      _functionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      _functionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      _functionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      _functionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isAuthorizedToGovern(
    _toCheck: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isSpecialResolution(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  masterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

  newCategory: {
    (
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      _functionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      _functionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      _functionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      _functionHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proposalCategoryInitiate: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  totalCategories(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  updateCategory: {
    (
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _categoryId: number | BN | string,
      _name: string,
      _memberRoleToVote: number | BN | string,
      _majorityVotePerc: number | BN | string,
      _quorumPerc: number | BN | string,
      _allowedToCreateProposal: (number | BN | string)[],
      _closingTime: number | BN | string,
      _actionHash: string,
      _contractAddress: string,
      _contractName: string,
      _incentives: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateCategoryActionHashes: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    addCategory: {
      (
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    category(
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN, BN[], BN, BN]>;

    categoryABReq(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    categoryAction(
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string, string, BN]>;

    categoryActionDetails(
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string, string, BN, string]>;

    categoryActionHashUpdated(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    categoryActionHashes(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    categoryExtendedData(
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeMasterAddress: {
      (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    constructorCheck(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    editCategory: {
      (
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        _functionHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        _functionHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        _functionHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        _functionHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isAuthorizedToGovern(
      _toCheck: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isSpecialResolution(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    masterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

    newCategory: {
      (
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        _functionHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        _functionHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        _functionHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        _functionHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    proposalCategoryInitiate: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    totalCategories(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    updateCategory: {
      (
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _categoryId: number | BN | string,
        _name: string,
        _memberRoleToVote: number | BN | string,
        _majorityVotePerc: number | BN | string,
        _quorumPerc: number | BN | string,
        _allowedToCreateProposal: (number | BN | string)[],
        _closingTime: number | BN | string,
        _actionHash: string,
        _contractAddress: string,
        _contractName: string,
        _incentives: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateCategoryActionHashes: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
