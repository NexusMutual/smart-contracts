/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PoolDataContract extends Truffle.Contract<PoolDataInstance> {
  "new"(
    _notariseAdd: string,
    _daiFeedAdd: string,
    _daiAdd: string,
    meta?: Truffle.TransactionDetails
  ): Promise<PoolDataInstance>;
}

type AllEvents = never;

export interface PoolDataInstance extends Truffle.ContractInstance {
  a(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  addCurrencyAssetCurrency: {
    (
      curr: string,
      currAddress: string,
      baseMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      currAddress: string,
      baseMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      currAddress: string,
      baseMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      currAddress: string,
      baseMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addInAllApiCall: {
    (myid: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(myid: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addInvestmentAssetCurrency: {
    (
      curr: string,
      currAddress: string,
      status: boolean,
      minHoldingPercX100: number | BN | string,
      maxHoldingPercX100: number | BN | string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      currAddress: string,
      status: boolean,
      minHoldingPercX100: number | BN | string,
      maxHoldingPercX100: number | BN | string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      currAddress: string,
      status: boolean,
      minHoldingPercX100: number | BN | string,
      maxHoldingPercX100: number | BN | string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      currAddress: string,
      status: boolean,
      minHoldingPercX100: number | BN | string,
      maxHoldingPercX100: number | BN | string,
      decimals: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allAPIcall(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  allAPIid(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BN, BN, BN]>;

  allMCRData(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN]>;

  c(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  capReached(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  capacityLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  changeCurrencyAssetAddress: {
    (
      curr: string,
      currAdd: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      currAdd: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      currAdd: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      currAdd: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeCurrencyAssetBaseMin: {
    (
      curr: string,
      baseMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      baseMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      baseMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      baseMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeCurrencyAssetVarMin: {
    (
      curr: string,
      varMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      varMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      varMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      varMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeDAIfeedAddress: {
    (_add: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_add: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeInvestmentAssetAddressAndDecimal: {
    (
      curr: string,
      currAdd: string,
      newDecimal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      currAdd: string,
      newDecimal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      currAdd: string,
      newDecimal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      currAdd: string,
      newDecimal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeInvestmentAssetHoldingPerc: {
    (
      curr: string,
      minPercX100: number | BN | string,
      maxPercX100: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      minPercX100: number | BN | string,
      maxPercX100: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      minPercX100: number | BN | string,
      maxPercX100: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      minPercX100: number | BN | string,
      maxPercX100: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeInvestmentAssetStatus: {
    (
      curr: string,
      status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      status: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeMasterAddress: {
    (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeNotariseAddress: {
    (_add: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_add: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  daiFeedAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ethVolumeLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAllCurrencies(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  getAllCurrenciesLen(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAllInvestmentCurrencies(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getApiCallDetails(
    myid: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BN, BN, BN]>;

  getApiCallIndex(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getApiIdTypeOf(
    myid: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getApilCallLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCAAvgRate(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCurrOfApiId(
    myid: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCurrenciesByIndex(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCurrencyAssetAddress(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCurrencyAssetBaseMin(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCurrencyAssetVarBase(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN, BN]>;

  getCurrencyAssetVarMin(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDateAddOfAPI(
    myid: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDateUpdOfAPI(
    myid: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getIAAvgRate(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getIARankDetailsByDate(
    date: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN, string, BN]>;

  getIdOfApiId(
    myid: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getInvestmentAssetAddress(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getInvestmentAssetDecimals(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getInvestmentAssetDetails(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, boolean, BN, BN, BN]>;

  getInvestmentAssetHoldingPerc(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  getInvestmentAssetMaxHoldingPerc(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getInvestmentAssetMinHoldingPerc(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getInvestmentAssetStatus(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getInvestmentCurrencyByIndex(
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getInvestmentCurrencyLen(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLastDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLastMCR(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN, BN, BN]>;

  getLastMCRDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLastMCREther(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLastMCRPerc(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getLastVfull(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getMCRDataLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getTokenPriceDetails(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  getUintParameters(
    code: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN]>;

  iaRatesTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isnotarise(
    _add: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  lastLiquidityTradeTrigger(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  liquidityTradeCallbackTime(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  mcrFailTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  mcrTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minCap(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

  notariseMCR(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pushMCRData: {
    (
      mcrp: number | BN | string,
      mcre: number | BN | string,
      vf: number | BN | string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      mcrp: number | BN | string,
      mcre: number | BN | string,
      vf: number | BN | string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      mcrp: number | BN | string,
      mcre: number | BN | string,
      vf: number | BN | string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      mcrp: number | BN | string,
      mcre: number | BN | string,
      vf: number | BN | string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  saveApiDetails: {
    (
      myid: string,
      _typeof: string,
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      myid: string,
      _typeof: string,
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      myid: string,
      _typeof: string,
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      myid: string,
      _typeof: string,
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  saveIARankDetails: {
    (
      maxIACurr: string,
      maxRate: number | BN | string,
      minIACurr: string,
      minRate: number | BN | string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      maxIACurr: string,
      maxRate: number | BN | string,
      minIACurr: string,
      minRate: number | BN | string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      maxIACurr: string,
      maxRate: number | BN | string,
      minIACurr: string,
      minRate: number | BN | string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      maxIACurr: string,
      maxRate: number | BN | string,
      minIACurr: string,
      minRate: number | BN | string,
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setCapReached: {
    (
      val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLastLiquidityTradeTrigger: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  shockParameter(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  uniswapDeadline(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  updateCAAvgRate: {
    (
      curr: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateDateUpdOfAPI: {
    (myid: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(myid: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateIAAvgRate: {
    (
      curr: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      curr: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      curr: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      curr: string,
      rate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateUintParameters: {
    (
      code: string,
      val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      code: string,
      val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      code: string,
      val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      code: string,
      val: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updatelastDate: {
    (
      newDate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newDate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newDate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newDate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  variationPercX100(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    a(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    addCurrencyAssetCurrency: {
      (
        curr: string,
        currAddress: string,
        baseMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        currAddress: string,
        baseMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        currAddress: string,
        baseMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        currAddress: string,
        baseMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addInAllApiCall: {
      (myid: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(myid: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        myid: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        myid: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addInvestmentAssetCurrency: {
      (
        curr: string,
        currAddress: string,
        status: boolean,
        minHoldingPercX100: number | BN | string,
        maxHoldingPercX100: number | BN | string,
        decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        currAddress: string,
        status: boolean,
        minHoldingPercX100: number | BN | string,
        maxHoldingPercX100: number | BN | string,
        decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        currAddress: string,
        status: boolean,
        minHoldingPercX100: number | BN | string,
        maxHoldingPercX100: number | BN | string,
        decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        currAddress: string,
        status: boolean,
        minHoldingPercX100: number | BN | string,
        maxHoldingPercX100: number | BN | string,
        decimals: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    allAPIcall(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    allAPIid(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, string, BN, BN, BN]>;

    allMCRData(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN]>;

    c(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    capReached(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    capacityLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    changeCurrencyAssetAddress: {
      (
        curr: string,
        currAdd: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        currAdd: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        currAdd: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        currAdd: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeCurrencyAssetBaseMin: {
      (
        curr: string,
        baseMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        baseMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        baseMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        baseMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeCurrencyAssetVarMin: {
      (
        curr: string,
        varMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        varMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        varMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        varMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeDAIfeedAddress: {
      (_add: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_add: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeInvestmentAssetAddressAndDecimal: {
      (
        curr: string,
        currAdd: string,
        newDecimal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        currAdd: string,
        newDecimal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        currAdd: string,
        newDecimal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        currAdd: string,
        newDecimal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeInvestmentAssetHoldingPerc: {
      (
        curr: string,
        minPercX100: number | BN | string,
        maxPercX100: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        minPercX100: number | BN | string,
        maxPercX100: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        minPercX100: number | BN | string,
        maxPercX100: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        minPercX100: number | BN | string,
        maxPercX100: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeInvestmentAssetStatus: {
      (
        curr: string,
        status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        status: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeMasterAddress: {
      (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeNotariseAddress: {
      (_add: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_add: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _add: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    daiFeedAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ethVolumeLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAllCurrencies(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    getAllCurrenciesLen(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getAllInvestmentCurrencies(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getApiCallDetails(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, string, BN, BN, BN]>;

    getApiCallIndex(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getApiIdTypeOf(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getApilCallLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCAAvgRate(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrOfApiId(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCurrenciesByIndex(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCurrencyAssetAddress(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCurrencyAssetBaseMin(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrencyAssetVarBase(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BN, BN]>;

    getCurrencyAssetVarMin(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getDateAddOfAPI(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getDateUpdOfAPI(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getIAAvgRate(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getIARankDetailsByDate(
      date: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BN, string, BN]>;

    getIdOfApiId(
      myid: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getInvestmentAssetAddress(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getInvestmentAssetDecimals(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getInvestmentAssetDetails(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, string, boolean, BN, BN, BN]>;

    getInvestmentAssetHoldingPerc(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    getInvestmentAssetMaxHoldingPerc(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getInvestmentAssetMinHoldingPerc(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getInvestmentAssetStatus(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    getInvestmentCurrencyByIndex(
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getInvestmentCurrencyLen(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getLastDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getLastMCR(
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN]>;

    getLastMCRDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getLastMCREther(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getLastMCRPerc(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getLastVfull(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getMCRDataLength(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getTokenPriceDetails(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN]>;

    getUintParameters(
      code: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BN]>;

    iaRatesTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    isnotarise(
      _add: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    lastLiquidityTradeTrigger(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    liquidityTradeCallbackTime(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    mcrFailTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    mcrTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    minCap(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

    notariseMCR(txDetails?: Truffle.TransactionDetails): Promise<string>;

    nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pushMCRData: {
      (
        mcrp: number | BN | string,
        mcre: number | BN | string,
        vf: number | BN | string,
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        mcrp: number | BN | string,
        mcre: number | BN | string,
        vf: number | BN | string,
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        mcrp: number | BN | string,
        mcre: number | BN | string,
        vf: number | BN | string,
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        mcrp: number | BN | string,
        mcre: number | BN | string,
        vf: number | BN | string,
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    saveApiDetails: {
      (
        myid: string,
        _typeof: string,
        id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        myid: string,
        _typeof: string,
        id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        myid: string,
        _typeof: string,
        id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        myid: string,
        _typeof: string,
        id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    saveIARankDetails: {
      (
        maxIACurr: string,
        maxRate: number | BN | string,
        minIACurr: string,
        minRate: number | BN | string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        maxIACurr: string,
        maxRate: number | BN | string,
        minIACurr: string,
        minRate: number | BN | string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        maxIACurr: string,
        maxRate: number | BN | string,
        minIACurr: string,
        minRate: number | BN | string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        maxIACurr: string,
        maxRate: number | BN | string,
        minIACurr: string,
        minRate: number | BN | string,
        date: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setCapReached: {
      (
        val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setLastLiquidityTradeTrigger: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    shockParameter(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    uniswapDeadline(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    updateCAAvgRate: {
      (
        curr: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateDateUpdOfAPI: {
      (myid: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(myid: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        myid: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        myid: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateIAAvgRate: {
      (
        curr: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        curr: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        curr: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        curr: string,
        rate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateUintParameters: {
      (
        code: string,
        val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        code: string,
        val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        code: string,
        val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        code: string,
        val: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updatelastDate: {
      (
        newDate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newDate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newDate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newDate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    variationPercX100(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
