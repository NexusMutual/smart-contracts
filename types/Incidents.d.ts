/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IncidentsContract extends Truffle.Contract<IncidentsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IncidentsInstance>;
}

export interface IncidentAdded {
  name: "IncidentAdded";
  args: {
    productId: string;
    incidentDate: BN;
    priceBefore: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface ProductAdded {
  name: "ProductAdded";
  args: {
    productId: string;
    coveredToken: string;
    underlyingToken: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents = IncidentAdded | ProductAdded;

export interface IncidentsInstance extends Truffle.ContractInstance {
  BURN_RATE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  accumulatedBurn(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addIncident: {
    (
      productId: string,
      incidentDate: number | BN | string,
      priceBefore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      productId: string,
      incidentDate: number | BN | string,
      priceBefore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      productId: string,
      incidentDate: number | BN | string,
      priceBefore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      productId: string,
      incidentDate: number | BN | string,
      priceBefore: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addProducts: {
    (
      _productIds: string[],
      _coveredTokens: string[],
      _underlyingTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _productIds: string[],
      _coveredTokens: string[],
      _underlyingTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _productIds: string[],
      _coveredTokens: string[],
      _underlyingTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _productIds: string[],
      _coveredTokens: string[],
      _underlyingTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeMasterAddress: {
    (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimPayout(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  coveredToken(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  incidentCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  incidents(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN, BN]>;

  initialize: {
    (
      burnRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      burnRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      burnRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      burnRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  internalContracts(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  master(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pushBurns: {
    (
      productId: string,
      iterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      productId: string,
      iterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      productId: string,
      iterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      productId: string,
      iterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemPayout: {
    (
      coverId: number | BN | string,
      incidentId: number | BN | string,
      coveredTokenAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      coverId: number | BN | string,
      incidentId: number | BN | string,
      coveredTokenAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
    sendTransaction(
      coverId: number | BN | string,
      incidentId: number | BN | string,
      coveredTokenAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      coverId: number | BN | string,
      incidentId: number | BN | string,
      coveredTokenAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  underlyingToken(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  updateUintParameters: {
    (
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawAsset: {
    (
      asset: string,
      destination: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      asset: string,
      destination: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      asset: string,
      destination: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      asset: string,
      destination: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    BURN_RATE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    accumulatedBurn(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    addIncident: {
      (
        productId: string,
        incidentDate: number | BN | string,
        priceBefore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        productId: string,
        incidentDate: number | BN | string,
        priceBefore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        productId: string,
        incidentDate: number | BN | string,
        priceBefore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        productId: string,
        incidentDate: number | BN | string,
        priceBefore: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addProducts: {
      (
        _productIds: string[],
        _coveredTokens: string[],
        _underlyingTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _productIds: string[],
        _coveredTokens: string[],
        _underlyingTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _productIds: string[],
        _coveredTokens: string[],
        _underlyingTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _productIds: string[],
        _coveredTokens: string[],
        _underlyingTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeMasterAddress: {
      (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimPayout(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    coveredToken(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    incidentCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    incidents(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BN, BN]>;

    initialize: {
      (
        burnRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        burnRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        burnRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        burnRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    internalContracts(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    master(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pushBurns: {
      (
        productId: string,
        iterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        productId: string,
        iterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        productId: string,
        iterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        productId: string,
        iterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemPayout: {
      (
        coverId: number | BN | string,
        incidentId: number | BN | string,
        coveredTokenAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        coverId: number | BN | string,
        incidentId: number | BN | string,
        coveredTokenAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[BN, BN]>;
      sendTransaction(
        coverId: number | BN | string,
        incidentId: number | BN | string,
        coveredTokenAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        coverId: number | BN | string,
        incidentId: number | BN | string,
        coveredTokenAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    underlyingToken(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    updateUintParameters: {
      (
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawAsset: {
      (
        asset: string,
        destination: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        asset: string,
        destination: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        asset: string,
        destination: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        asset: string,
        destination: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
