/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ITokenDataContract
  extends Truffle.Contract<ITokenDataInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ITokenDataInstance>;
}

type AllEvents = never;

export interface ITokenDataInstance extends Truffle.ContractInstance {
  getStakerStakedContractByIndex(
    _stakerAddress: string,
    _stakerIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getStakerStakedContractIndex(
    _stakerAddress: string,
    _stakerIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getStakerStakedContractLength(
    _stakerAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getStakerTotalEarnedStakeCommission(
    _stakerAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getStakerTotalReedmedStakeCommission(
    _stakerAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getStakerUnlockedStakedTokens(
    _stakerAddress: string,
    _stakerIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lastCompletedStakeCommission(
    _stakerAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  members(
    _memberRoleId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, string[]]>;

  pushBurnedTokens: {
    (
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pushUnlockedStakedTokens: {
    (
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  scValidDays(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  setUnlockableBeforeLastBurnTokens: {
    (
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stakerStakedContracts(
    staker: string,
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN, BN, BN, BN, BN, BN]>;

  methods: {
    getStakerStakedContractByIndex(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getStakerStakedContractIndex(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getStakerStakedContractLength(
      _stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getStakerTotalEarnedStakeCommission(
      _stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getStakerTotalReedmedStakeCommission(
      _stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getStakerUnlockedStakedTokens(
      _stakerAddress: string,
      _stakerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lastCompletedStakeCommission(
      _stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    members(
      _memberRoleId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string[]]>;

    pushBurnedTokens: {
      (
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    pushUnlockedStakedTokens: {
      (
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    scValidDays(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    setUnlockableBeforeLastBurnTokens: {
      (
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _stakerAddress: string,
        _stakerIndex: number | BN | string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    stakerStakedContracts(
      staker: string,
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BN, BN, BN, BN, BN, BN]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
