/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CoverContract extends Truffle.Contract<CoverInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CoverInstance>;
}

export interface ClaimSubmitted {
  name: "ClaimSubmitted";
  args: {
    claimId: BN;
    coverId: BN;
    submitter: string;
    data: string;
    0: BN;
    1: BN;
    2: string;
    3: string;
  };
}

export interface CoverBought {
  name: "CoverBought";
  args: {
    coverId: BN;
    buyer: string;
    contractAddress: string;
    coverAsset: string;
    sumAssured: BN;
    coverPeriod: BN;
    coverType: BN;
    data: string;
    0: BN;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: string;
  };
}

type AllEvents = ClaimSubmitted | CoverBought;

export interface CoverInstance extends Truffle.ContractInstance {
  DAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ETH(txDetails?: Truffle.TransactionDetails): Promise<string>;

  assetDecimals(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  buyCover: {
    (
      contractAddress: string,
      coverAsset: string,
      sumAssured: number | BN | string,
      coverPeriod: number | BN | string,
      coverType: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      contractAddress: string,
      coverAsset: string,
      sumAssured: number | BN | string,
      coverPeriod: number | BN | string,
      coverType: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      contractAddress: string,
      coverAsset: string,
      sumAssured: number | BN | string,
      coverPeriod: number | BN | string,
      coverType: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractAddress: string,
      coverAsset: string,
      sumAssured: number | BN | string,
      coverPeriod: number | BN | string,
      coverType: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeMasterAddress: {
    (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claims(txDetails?: Truffle.TransactionDetails): Promise<string>;

  claimsData(txDetails?: Truffle.TransactionDetails): Promise<string>;

  executeCoverAction: {
    (
      tokenId: number | BN | string,
      action: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: number | BN | string,
      action: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BN]>;
    sendTransaction(
      tokenId: number | BN | string,
      action: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      action: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getClaimCoverId(
    claimId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCover(
    coverId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, string, string, BN, string]>;

  getCoverPrice(
    contractAddress: string,
    coverAsset: string,
    sumAssured: number | BN | string,
    coverPeriod: number | BN | string,
    coverType: number | BN | string,
    data: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCurrencyAssetAddress(
    currency: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getCurrencyFromAssetAddress(
    asset: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPayoutOutcome(
    claimId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, string]>;

  master(txDetails?: Truffle.TransactionDetails): Promise<string>;

  memberRoles(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nxmToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

  quotation(txDetails?: Truffle.TransactionDetails): Promise<string>;

  quotationData(txDetails?: Truffle.TransactionDetails): Promise<string>;

  submitClaim: {
    (
      coverId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      coverId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      coverId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      coverId: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  switchMembership: {
    (newAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tokenController(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    DAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ETH(txDetails?: Truffle.TransactionDetails): Promise<string>;

    assetDecimals(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    buyCover: {
      (
        contractAddress: string,
        coverAsset: string,
        sumAssured: number | BN | string,
        coverPeriod: number | BN | string,
        coverType: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        contractAddress: string,
        coverAsset: string,
        sumAssured: number | BN | string,
        coverPeriod: number | BN | string,
        coverType: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        contractAddress: string,
        coverAsset: string,
        sumAssured: number | BN | string,
        coverPeriod: number | BN | string,
        coverType: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractAddress: string,
        coverAsset: string,
        sumAssured: number | BN | string,
        coverPeriod: number | BN | string,
        coverType: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeMasterAddress: {
      (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claims(txDetails?: Truffle.TransactionDetails): Promise<string>;

    claimsData(txDetails?: Truffle.TransactionDetails): Promise<string>;

    executeCoverAction: {
      (
        tokenId: number | BN | string,
        action: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: number | BN | string,
        action: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[string, BN]>;
      sendTransaction(
        tokenId: number | BN | string,
        action: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: number | BN | string,
        action: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getClaimCoverId(
      claimId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCover(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN, string, string, BN, string]>;

    getCoverPrice(
      contractAddress: string,
      coverAsset: string,
      sumAssured: number | BN | string,
      coverPeriod: number | BN | string,
      coverType: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrencyAssetAddress(
      currency: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getCurrencyFromAssetAddress(
      asset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getPayoutOutcome(
      claimId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, string]>;

    master(txDetails?: Truffle.TransactionDetails): Promise<string>;

    memberRoles(txDetails?: Truffle.TransactionDetails): Promise<string>;

    nxmToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pool(txDetails?: Truffle.TransactionDetails): Promise<string>;

    quotation(txDetails?: Truffle.TransactionDetails): Promise<string>;

    quotationData(txDetails?: Truffle.TransactionDetails): Promise<string>;

    submitClaim: {
      (
        coverId: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        coverId: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        coverId: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        coverId: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    switchMembership: {
      (newAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tokenController(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
