/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IGovernanceContract
  extends Truffle.Contract<IGovernanceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IGovernanceInstance>;
}

export interface ActionSuccess {
  name: "ActionSuccess";
  args: {
    proposalId: BN;
    0: BN;
  };
}

export interface CloseProposalOnTime {
  name: "CloseProposalOnTime";
  args: {
    proposalId: BN;
    time: BN;
    0: BN;
    1: BN;
  };
}

export interface Proposal {
  name: "Proposal";
  args: {
    proposalOwner: string;
    proposalId: BN;
    dateAdd: BN;
    proposalTitle: string;
    proposalSD: string;
    proposalDescHash: string;
    0: string;
    1: BN;
    2: BN;
    3: string;
    4: string;
    5: string;
  };
}

export interface ProposalAccepted {
  name: "ProposalAccepted";
  args: {
    proposalId: BN;
    0: BN;
  };
}

export interface RewardClaimed {
  name: "RewardClaimed";
  args: {
    member: string;
    gbtReward: BN;
    0: string;
    1: BN;
  };
}

export interface Solution {
  name: "Solution";
  args: {
    proposalId: BN;
    solutionOwner: string;
    solutionId: BN;
    solutionDescHash: string;
    dateAdd: BN;
    0: BN;
    1: string;
    2: BN;
    3: string;
    4: BN;
  };
}

export interface Vote {
  name: "Vote";
  args: {
    from: string;
    proposalId: BN;
    voteId: BN;
    dateAdd: BN;
    solutionChosen: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
  };
}

export interface VoteCast {
  name: "VoteCast";
  args: {
    proposalId: BN;
    0: BN;
  };
}

type AllEvents =
  | ActionSuccess
  | CloseProposalOnTime
  | Proposal
  | ProposalAccepted
  | RewardClaimed
  | Solution
  | Vote
  | VoteCast;

export interface IGovernanceInstance extends Truffle.ContractInstance {
  allowedToCatgorize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  canCloseProposal(
    _proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  categorizeProposal: {
    (
      _proposalId: number | BN | string,
      _categoryId: number | BN | string,
      _incentives: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalId: number | BN | string,
      _categoryId: number | BN | string,
      _incentives: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: number | BN | string,
      _categoryId: number | BN | string,
      _incentives: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: number | BN | string,
      _categoryId: number | BN | string,
      _incentives: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimReward: {
    (
      _memberAddress: string,
      _maxRecords: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _memberAddress: string,
      _maxRecords: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _memberAddress: string,
      _maxRecords: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _memberAddress: string,
      _maxRecords: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  closeProposal: {
    (
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createProposal: {
    (
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      _categoryId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createProposalwithSolution: {
    (
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      _categoryId: number | BN | string,
      _solutionHash: string,
      _action: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      _categoryId: number | BN | string,
      _solutionHash: string,
      _action: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      _categoryId: number | BN | string,
      _solutionHash: string,
      _action: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      _categoryId: number | BN | string,
      _solutionHash: string,
      _action: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposal(
    _proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN]>;

  submitProposalWithSolution: {
    (
      _proposalId: number | BN | string,
      _solutionHash: string,
      _action: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalId: number | BN | string,
      _solutionHash: string,
      _action: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: number | BN | string,
      _solutionHash: string,
      _action: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: number | BN | string,
      _solutionHash: string,
      _action: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitVote: {
    (
      _proposalId: number | BN | string,
      _solutionChosen: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalId: number | BN | string,
      _solutionChosen: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: number | BN | string,
      _solutionChosen: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: number | BN | string,
      _solutionChosen: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateProposal: {
    (
      _proposalId: number | BN | string,
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalId: number | BN | string,
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: number | BN | string,
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: number | BN | string,
      _proposalTitle: string,
      _proposalSD: string,
      _proposalDescHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    allowedToCatgorize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    canCloseProposal(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    categorizeProposal: {
      (
        _proposalId: number | BN | string,
        _categoryId: number | BN | string,
        _incentives: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalId: number | BN | string,
        _categoryId: number | BN | string,
        _incentives: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalId: number | BN | string,
        _categoryId: number | BN | string,
        _incentives: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalId: number | BN | string,
        _categoryId: number | BN | string,
        _incentives: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimReward: {
      (
        _memberAddress: string,
        _maxRecords: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _memberAddress: string,
        _maxRecords: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _memberAddress: string,
        _maxRecords: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _memberAddress: string,
        _maxRecords: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    closeProposal: {
      (
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createProposal: {
      (
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        _categoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        _categoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        _categoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        _categoryId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createProposalwithSolution: {
      (
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        _categoryId: number | BN | string,
        _solutionHash: string,
        _action: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        _categoryId: number | BN | string,
        _solutionHash: string,
        _action: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        _categoryId: number | BN | string,
        _solutionHash: string,
        _action: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        _categoryId: number | BN | string,
        _solutionHash: string,
        _action: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    proposal(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN, BN]>;

    submitProposalWithSolution: {
      (
        _proposalId: number | BN | string,
        _solutionHash: string,
        _action: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalId: number | BN | string,
        _solutionHash: string,
        _action: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalId: number | BN | string,
        _solutionHash: string,
        _action: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalId: number | BN | string,
        _solutionHash: string,
        _action: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    submitVote: {
      (
        _proposalId: number | BN | string,
        _solutionChosen: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalId: number | BN | string,
        _solutionChosen: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalId: number | BN | string,
        _solutionChosen: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalId: number | BN | string,
        _solutionChosen: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateProposal: {
      (
        _proposalId: number | BN | string,
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalId: number | BN | string,
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalId: number | BN | string,
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalId: number | BN | string,
        _proposalTitle: string,
        _proposalSD: string,
        _proposalDescHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
