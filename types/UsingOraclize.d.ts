/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface UsingOraclizeContract
  extends Truffle.Contract<UsingOraclizeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<UsingOraclizeInstance>;
}

type AllEvents = never;

export interface UsingOraclizeInstance extends Truffle.ContractInstance {
  methods: {
    "__callback(bytes32,string)": {
      (
        _myid: string,
        _result: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _myid: string,
        _result: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _myid: string,
        _result: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _myid: string,
        _result: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "__callback(bytes32,string,bytes)": {
      (
        _myid: string,
        _result: string,
        _proof: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _myid: string,
        _result: string,
        _proof: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _myid: string,
        _result: string,
        _proof: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _myid: string,
        _result: string,
        _proof: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
