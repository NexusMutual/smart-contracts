/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TokenFunctionsContract
  extends Truffle.Contract<TokenFunctionsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TokenFunctionsInstance>;
}

export interface BurnCATokens {
  name: "BurnCATokens";
  args: {
    claimId: BN;
    addr: string;
    amount: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

type AllEvents = BurnCATokens;

export interface TokenFunctionsInstance extends Truffle.ContractInstance {
  burnCAToken: {
    (
      claimid: number | BN | string,
      _value: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      claimid: number | BN | string,
      _value: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      claimid: number | BN | string,
      _value: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      claimid: number | BN | string,
      _value: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeMasterAddress: {
    (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getUserAllLockedCNTokens(
    _of: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isLockedForMemberVote(
    _of: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  master(txDetails?: Truffle.TransactionDetails): Promise<string>;

  qd(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tc(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tk(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    burnCAToken: {
      (
        claimid: number | BN | string,
        _value: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        claimid: number | BN | string,
        _value: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        claimid: number | BN | string,
        _value: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        claimid: number | BN | string,
        _value: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeMasterAddress: {
      (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getUserAllLockedCNTokens(
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    isLockedForMemberVote(
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    master(txDetails?: Truffle.TransactionDetails): Promise<string>;

    qd(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tc(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tk(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
