/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface DisposablePooledStakingContract
  extends Truffle.Contract<DisposablePooledStakingInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<DisposablePooledStakingInstance>;
}

export interface BurnRequested {
  name: "BurnRequested";
  args: {
    contractAddress: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface Burned {
  name: "Burned";
  args: {
    contractAddress: string;
    amount: BN;
    contractStakeBeforeBurn: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface Deposited {
  name: "Deposited";
  args: {
    staker: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface PendingActionsProcessed {
  name: "PendingActionsProcessed";
  args: {
    finished: boolean;
    0: boolean;
  };
}

export interface RewardAdded {
  name: "RewardAdded";
  args: {
    contractAddress: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface RewardRequested {
  name: "RewardRequested";
  args: {
    contractAddress: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface RewardWithdrawn {
  name: "RewardWithdrawn";
  args: {
    staker: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface Rewarded {
  name: "Rewarded";
  args: {
    contractAddress: string;
    amount: BN;
    contractStake: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface RewardsMigrationCompleted {
  name: "RewardsMigrationCompleted";
  args: {
    finished: boolean;
    firstReward: BN;
    iterationsLeft: BN;
    0: boolean;
    1: BN;
    2: BN;
  };
}

export interface Staked {
  name: "Staked";
  args: {
    contractAddress: string;
    staker: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface UnstakeRequested {
  name: "UnstakeRequested";
  args: {
    contractAddress: string;
    staker: string;
    amount: BN;
    unstakeAt: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface Unstaked {
  name: "Unstaked";
  args: {
    contractAddress: string;
    staker: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface Withdrawn {
  name: "Withdrawn";
  args: {
    staker: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | BurnRequested
  | Burned
  | Deposited
  | PendingActionsProcessed
  | RewardAdded
  | RewardRequested
  | RewardWithdrawn
  | Rewarded
  | RewardsMigrationCompleted
  | Staked
  | UnstakeRequested
  | Unstaked
  | Withdrawn;

export interface DisposablePooledStakingInstance
  extends Truffle.ContractInstance {
  MAX_EXPOSURE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MIN_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MIN_UNSTAKE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  REWARD_ROUNDS_START(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  REWARD_ROUND_DURATION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  UNSTAKE_LOCK_TIME(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  _processPendingActions: {
    (
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, BN]>;
    sendTransaction(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  accumulateReward: {
    (
      contractAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      contractAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      contractAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  accumulatedRewards(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  burn(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN, string]>;

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeMasterAddress: {
    (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contractBurned(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  contractRewarded(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  contractStake(
    contractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  contractStaked(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  contractStakerAtIndex(
    contractAddress: string,
    stakerIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  contractStakerCount(
    contractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  contractStakers(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  contractStakersArray(
    contractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  depositAndStake: {
    (
      amount: number | BN | string,
      _contracts: string[],
      _stakes: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amount: number | BN | string,
      _contracts: string[],
      _stakes: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      _contracts: string[],
      _stakes: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      _contracts: string[],
      _stakes: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  firstReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentRewardsRound(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  hasPendingActions(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  hasPendingBurns(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  hasPendingRewards(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  hasPendingUnstakeRequests(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initializeRewardRoundsStart: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isContractStakeCalculated(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  lastRewardId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  lastUnstakeRequestId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  master(txDetails?: Truffle.TransactionDetails): Promise<string>;

  migrateRewardsToAccumulatedRewards: {
    (
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, BN]>;
    sendTransaction(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  processPendingActions: {
    (
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  processPendingActionsReturnLeft: {
    (
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, BN]>;
    sendTransaction(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      maxIterations: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  processedToStakerIndex(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  pushBurn: {
    (
      contractAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      contractAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      contractAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pushRewards: {
    (
      contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestUnstake: {
    (
      _contracts: string[],
      _amounts: (number | BN | string)[],
      _insertAfter: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _contracts: string[],
      _amounts: (number | BN | string)[],
      _insertAfter: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _contracts: string[],
      _amounts: (number | BN | string)[],
      _insertAfter: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contracts: string[],
      _amounts: (number | BN | string)[],
      _insertAfter: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  rewards(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, string]>;

  stakerContractAtIndex(
    staker: string,
    contractIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  stakerContractCount(
    staker: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  stakerContractPendingUnstakeTotal(
    staker: string,
    contractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  stakerContractStake(
    staker: string,
    contractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  stakerContractsArray(
    staker: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  stakerDeposit(
    staker: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  stakerMaxWithdrawable(
    stakerAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  stakerReward(
    staker: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  stakers(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokenController(txDetails?: Truffle.TransactionDetails): Promise<string>;

  unstakeRequestAtIndex(
    unstakeRequestId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, string, string, BN]>;

  unstakeRequests(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, string, string, BN]>;

  updateUintParameters: {
    (
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      code: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawReward: {
    (stakerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    MAX_EXPOSURE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MIN_STAKE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MIN_UNSTAKE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    REWARD_ROUNDS_START(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    REWARD_ROUND_DURATION(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    UNSTAKE_LOCK_TIME(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    _processPendingActions: {
      (
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[boolean, BN]>;
      sendTransaction(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    accumulateReward: {
      (
        contractAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        contractAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        contractAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    accumulatedRewards(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    burn(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN, string]>;

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeMasterAddress: {
      (masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    contractBurned(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    contractRewarded(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    contractStake(
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    contractStaked(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    contractStakerAtIndex(
      contractAddress: string,
      stakerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    contractStakerCount(
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    contractStakers(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    contractStakersArray(
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    depositAndStake: {
      (
        amount: number | BN | string,
        _contracts: string[],
        _stakes: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amount: number | BN | string,
        _contracts: string[],
        _stakes: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amount: number | BN | string,
        _contracts: string[],
        _stakes: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amount: number | BN | string,
        _contracts: string[],
        _stakes: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    firstReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCurrentRewardsRound(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    hasPendingActions(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    hasPendingBurns(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    hasPendingRewards(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    hasPendingUnstakeRequests(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    initializeRewardRoundsStart: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    isContractStakeCalculated(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    lastRewardId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    lastUnstakeRequestId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    master(txDetails?: Truffle.TransactionDetails): Promise<string>;

    migrateRewardsToAccumulatedRewards: {
      (
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[boolean, BN]>;
      sendTransaction(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    processPendingActions: {
      (
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    processPendingActionsReturnLeft: {
      (
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<[boolean, BN]>;
      sendTransaction(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        maxIterations: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    processedToStakerIndex(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    pushBurn: {
      (
        contractAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        contractAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        contractAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    pushRewards: {
      (
        contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestUnstake: {
      (
        _contracts: string[],
        _amounts: (number | BN | string)[],
        _insertAfter: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _contracts: string[],
        _amounts: (number | BN | string)[],
        _insertAfter: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _contracts: string[],
        _amounts: (number | BN | string)[],
        _insertAfter: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _contracts: string[],
        _amounts: (number | BN | string)[],
        _insertAfter: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    rewards(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, string]>;

    stakerContractAtIndex(
      staker: string,
      contractIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    stakerContractCount(
      staker: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    stakerContractPendingUnstakeTotal(
      staker: string,
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    stakerContractStake(
      staker: string,
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    stakerContractsArray(
      staker: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    stakerDeposit(
      staker: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    stakerMaxWithdrawable(
      stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    stakerReward(
      staker: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    stakers(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tokenController(txDetails?: Truffle.TransactionDetails): Promise<string>;

    unstakeRequestAtIndex(
      unstakeRequestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, string, string, BN]>;

    unstakeRequests(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, string, string, BN]>;

    updateUintParameters: {
      (
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        code: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawReward: {
      (stakerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        stakerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        stakerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        stakerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "initialize()": {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    "initialize(address,uint256,uint256,uint256,uint256)": {
      (
        _tokenControllerAddress: string,
        minStake: number | BN | string,
        minUnstake: number | BN | string,
        maxExposure: number | BN | string,
        unstakeLockTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _tokenControllerAddress: string,
        minStake: number | BN | string,
        minUnstake: number | BN | string,
        maxExposure: number | BN | string,
        unstakeLockTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _tokenControllerAddress: string,
        minStake: number | BN | string,
        minUnstake: number | BN | string,
        maxExposure: number | BN | string,
        unstakeLockTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _tokenControllerAddress: string,
        minStake: number | BN | string,
        minUnstake: number | BN | string,
        maxExposure: number | BN | string,
        unstakeLockTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
