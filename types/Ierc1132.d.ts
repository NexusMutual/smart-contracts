/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface Ierc1132Contract extends Truffle.Contract<Ierc1132Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ierc1132Instance>;
}

export interface Locked {
  name: "Locked";
  args: {
    _of: string;
    _reason: string;
    _amount: BN;
    _validity: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface Unlocked {
  name: "Unlocked";
  args: {
    _of: string;
    _reason: string;
    _amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents = Locked | Unlocked;

export interface Ierc1132Instance extends Truffle.ContractInstance {
  extendLock: {
    (
      _reason: string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reason: string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _reason: string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reason: string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getUnlockableTokens(
    _of: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  increaseLockAmount: {
    (
      _reason: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reason: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _reason: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reason: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lock: {
    (
      _reason: string,
      _amount: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _reason: string,
      _amount: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _reason: string,
      _amount: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _reason: string,
      _amount: number | BN | string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lockReason(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  locked(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, boolean]>;

  tokensLocked(
    _of: string,
    _reason: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokensLockedAtTime(
    _of: string,
    _reason: string,
    _time: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  tokensUnlockable(
    _of: string,
    _reason: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  totalBalanceOf(
    _of: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  unlock: {
    (_of: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_of: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    extendLock: {
      (
        _reason: string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reason: string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _reason: string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reason: string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getUnlockableTokens(
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    increaseLockAmount: {
      (
        _reason: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reason: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _reason: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reason: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    lock: {
      (
        _reason: string,
        _amount: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _reason: string,
        _amount: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _reason: string,
        _amount: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _reason: string,
        _amount: number | BN | string,
        _time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    lockReason(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    locked(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, boolean]>;

    tokensLocked(
      _of: string,
      _reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    tokensLockedAtTime(
      _of: string,
      _reason: string,
      _time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    tokensUnlockable(
      _of: string,
      _reason: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    totalBalanceOf(
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    unlock: {
      (_of: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_of: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
