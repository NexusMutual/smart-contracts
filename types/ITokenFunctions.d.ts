/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ITokenFunctionsContract
  extends Truffle.Contract<ITokenFunctionsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ITokenFunctionsInstance>;
}

type AllEvents = never;

export interface ITokenFunctionsInstance extends Truffle.ContractInstance {
  _deprecated_getStakerUnlockableTokensOnSmartContract(
    _stakerAddress: string,
    _stakedContractAddress: string,
    _stakedContractIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  _deprecated_unlockableBeforeBurningAndCanBurn(
    stakerAdd: string,
    stakedAdd: string,
    stakerIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  methods: {
    _deprecated_getStakerUnlockableTokensOnSmartContract(
      _stakerAddress: string,
      _stakedContractAddress: string,
      _stakedContractIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    _deprecated_unlockableBeforeBurningAndCanBurn(
      stakerAdd: string,
      stakedAdd: string,
      stakerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
