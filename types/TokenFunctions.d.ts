/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TokenFunctionsContract
  extends Truffle.Contract<TokenFunctionsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TokenFunctionsInstance>;
}

export interface BurnCATokens {
  name: "BurnCATokens";
  args: {
    claimId: BN;
    addr: string;
    amount: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

type AllEvents = BurnCATokens;

export interface TokenFunctionsInstance extends Truffle.ContractInstance {
  _deprecated_getStakerUnlockableTokensOnSmartContract(
    _stakerAddress: string,
    _stakedContractAddress: string,
    _stakedContractIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  _deprecated_unlockableBeforeBurningAndCanBurn(
    stakerAdd: string,
    stakedAdd: string,
    stakerIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  burnCAToken: {
    (
      claimid: number | BN | string,
      _value: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      claimid: number | BN | string,
      _value: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      claimid: number | BN | string,
      _value: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      claimid: number | BN | string,
      _value: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnDepositCN: {
    (
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnStakedTokens: {
    (
      coverId: number | BN | string,
      coverCurrency: string,
      sumAssured: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      coverId: number | BN | string,
      coverCurrency: string,
      sumAssured: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      coverId: number | BN | string,
      coverCurrency: string,
      sumAssured: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      coverId: number | BN | string,
      coverCurrency: string,
      sumAssured: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnStakerLockedToken: {
    (
      arg0: number | BN | string,
      arg1: string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: number | BN | string,
      arg1: string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      arg0: number | BN | string,
      arg1: string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: number | BN | string,
      arg1: string,
      arg2: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeDependentContractAddress: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeMasterAddress: {
    (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _masterAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositCN: {
    (
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deprecated_getStakerAllLockedTokens(
    _stakerAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  deprecated_getStakerAllUnlockableStakedTokens(
    _stakerAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  deprecated_getStakerLockedTokensOnSmartContract(
    _stakerAddress: string,
    _stakedContractAddress: string,
    _stakedContractIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  deprecated_getStakerUnlockableTokensOnSmartContract(
    stakerAddress: string,
    stakedContractAddress: string,
    stakerIndex: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  deprecated_getTotalStakedTokensOnSmartContract(
    _stakedContractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  deprecated_unlockStakerUnlockableTokens: {
    (_stakerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  extendCNEPOff: {
    (
      _of: string,
      _coverId: number | BN | string,
      _lockTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _of: string,
      _coverId: number | BN | string,
      _lockTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _of: string,
      _coverId: number | BN | string,
      _lockTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _of: string,
      _coverId: number | BN | string,
      _lockTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLockedCNAgainstCover(
    _coverId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTokenPrice(
    curr: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getUserAllLockedCNTokens(
    _of: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getUserLockedCNTokens(
    _of: string,
    _coverId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isLockedForMemberVote(
    _of: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  lockCN: {
    (
      coverNoteAmount: number | BN | string,
      coverPeriod: number | BN | string,
      coverId: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      coverNoteAmount: number | BN | string,
      coverPeriod: number | BN | string,
      coverId: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      coverNoteAmount: number | BN | string,
      coverPeriod: number | BN | string,
      coverId: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      coverNoteAmount: number | BN | string,
      coverPeriod: number | BN | string,
      coverId: number | BN | string,
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pushStakerRewards: {
    (
      _contractAddress: string,
      _coverPriceNXM: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _contractAddress: string,
      _coverPriceNXM: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _contractAddress: string,
      _coverPriceNXM: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _contractAddress: string,
      _coverPriceNXM: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tk(txDetails?: Truffle.TransactionDetails): Promise<string>;

  unlockCN: {
    (
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    _deprecated_getStakerUnlockableTokensOnSmartContract(
      _stakerAddress: string,
      _stakedContractAddress: string,
      _stakedContractIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    _deprecated_unlockableBeforeBurningAndCanBurn(
      stakerAdd: string,
      stakedAdd: string,
      stakerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    burnCAToken: {
      (
        claimid: number | BN | string,
        _value: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        claimid: number | BN | string,
        _value: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        claimid: number | BN | string,
        _value: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        claimid: number | BN | string,
        _value: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    burnDepositCN: {
      (
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    burnStakedTokens: {
      (
        coverId: number | BN | string,
        coverCurrency: string,
        sumAssured: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        coverId: number | BN | string,
        coverCurrency: string,
        sumAssured: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        coverId: number | BN | string,
        coverCurrency: string,
        sumAssured: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        coverId: number | BN | string,
        coverCurrency: string,
        sumAssured: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    burnStakerLockedToken: {
      (
        arg0: number | BN | string,
        arg1: string,
        arg2: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: number | BN | string,
        arg1: string,
        arg2: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        arg0: number | BN | string,
        arg1: string,
        arg2: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: number | BN | string,
        arg1: string,
        arg2: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeDependentContractAddress: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeMasterAddress: {
      (_masterAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _masterAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositCN: {
      (
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deprecated_getStakerAllLockedTokens(
      _stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    deprecated_getStakerAllUnlockableStakedTokens(
      _stakerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    deprecated_getStakerLockedTokensOnSmartContract(
      _stakerAddress: string,
      _stakedContractAddress: string,
      _stakedContractIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    deprecated_getStakerUnlockableTokensOnSmartContract(
      stakerAddress: string,
      stakedContractAddress: string,
      stakerIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    deprecated_getTotalStakedTokensOnSmartContract(
      _stakedContractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    deprecated_unlockStakerUnlockableTokens: {
      (_stakerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _stakerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _stakerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _stakerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    extendCNEPOff: {
      (
        _of: string,
        _coverId: number | BN | string,
        _lockTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _of: string,
        _coverId: number | BN | string,
        _lockTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _of: string,
        _coverId: number | BN | string,
        _lockTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _of: string,
        _coverId: number | BN | string,
        _lockTime: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getLockedCNAgainstCover(
      _coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getTokenPrice(
      curr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getUserAllLockedCNTokens(
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getUserLockedCNTokens(
      _of: string,
      _coverId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    isLockedForMemberVote(
      _of: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    lockCN: {
      (
        coverNoteAmount: number | BN | string,
        coverPeriod: number | BN | string,
        coverId: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        coverNoteAmount: number | BN | string,
        coverPeriod: number | BN | string,
        coverId: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        coverNoteAmount: number | BN | string,
        coverPeriod: number | BN | string,
        coverId: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        coverNoteAmount: number | BN | string,
        coverPeriod: number | BN | string,
        coverId: number | BN | string,
        _of: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    ms(txDetails?: Truffle.TransactionDetails): Promise<string>;

    nxMasterAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pushStakerRewards: {
      (
        _contractAddress: string,
        _coverPriceNXM: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _contractAddress: string,
        _coverPriceNXM: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _contractAddress: string,
        _coverPriceNXM: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _contractAddress: string,
        _coverPriceNXM: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tk(txDetails?: Truffle.TransactionDetails): Promise<string>;

    unlockCN: {
      (
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        coverId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
